from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from command_base import CommandBase
from db_manager import APIClient
import logging

class MenuCommand(CommandBase):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–æ–≤–∞—Ä—ñ–≤ —É —á–∞—Ç—ñ.
    """
    def execute(self, update: Update, context: CallbackContext):
        """
        –í–∏–≤–æ–¥–∏—Ç—å –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —è–∫ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏ –≤ —á–∞—Ç—ñ.

        –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
            update (Update): –û–±'—î–∫—Ç Update, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —á–∞—Ç—É.
            context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π –±–æ—Ç–∞.
        """
        try:
            context.user_data['processing_order'] = False
            rows = APIClient.get_menu()
            keyboard = [[InlineKeyboardButton(row[0], callback_data=row[0])] for row in rows]
            keyboard.append([InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏", callback_data="all_details")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            context.bot.send_message(chat_id=update.effective_chat.id, text='üìã –ú–µ–Ω—é <b>ADP Pizza</b>',
                                     parse_mode='HTML', reply_markup=reply_markup)
        except Exception as e:
            logging.error(f"Menu Command execute error: {e}", exc_info=True)

class DetailsCommand(CommandBase):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä.
    """
    def execute(self, update: Update, context: CallbackContext):
        """
        –ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É, —è–∫—â–æ –≤—ñ–Ω –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.

        –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
            update (Update): –û–±'—î–∫—Ç Update, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —á–∞—Ç—É.
            context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏.
        """
        try:
            context.user_data['processing_order'] = False
            pizza_name = ' '.join(context.args)
            row = APIClient.get_pizza_details(pizza_name)
            if row:
                message = f"üçï <b>{row[0]}</b>\n\nüí° <b>–°–∫–ª–∞–¥:</b> <i>{row[1]}</i>\n\nüíµ <b>–¶—ñ–Ω–∞:</b> {row[3]} –≥—Ä–Ω"
                cart_button = [[InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"add_to_cart_{row[4]}")]]
                reply_markup = InlineKeyboardMarkup(cart_button)
                if row[2]:
                    context.bot.send_photo(chat_id=update.effective_chat.id, photo=row[2], caption=message,
                                           parse_mode='HTML', reply_markup=reply_markup)
                else:
                    context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode='HTML',
                                             reply_markup=reply_markup)
            else:
                context.bot.send_message(chat_id=update.effective_chat.id, text="–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò∂‚Äçüå´Ô∏è")
        except Exception as e:
            logging.error(f"Details Command execute error: {e}", exc_info=True)

class AllDetailsCommand(CommandBase):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —É –º–µ–Ω—é.
    """
    def execute(self, update: Update, context: CallbackContext):
        """
        –í–∏–∫–æ–Ω—É—î –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π –≤–∏–≤—ñ–¥ –¥–µ—Ç–∞–ª–µ–π –∫–æ–∂–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä—É –∑ –º–µ–Ω—é.

        –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
            update (Update): –û–±'—î–∫—Ç Update, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —á–∞—Ç—É.
            context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏.
        """
        try:
            context.user_data['processing_order'] = False
            rows = APIClient.get_menu()
            for row in rows:
                pizza_name = row[0]
                context.args = [pizza_name]
                DetailsCommand(self.menu_repository).execute(update, context)
        except Exception as e:
            logging.error(f"All-Details Command execute error: {e}", exc_info=True)

class ButtonHandler(CommandBase):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ —É —á–∞—Ç—ñ.
    """
    def set_factory(self, factory):
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ñ–∞–±—Ä–∏–∫—É –∫–æ–º–∞–Ω–¥, —è–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–∫–∑–µ–º–ø–ª—è—Ä—ñ–≤ –∫–æ–º–∞–Ω–¥.

        –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
            factory (CommandFactory): –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥.
        """
        self.command_factory = factory

    def execute(self, update: Update, context: CallbackContext):
        """
        –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ —ñ –≤–∏–∫–æ–Ω—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.

        –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
            update (Update): –û–±'—î–∫—Ç Update, —â–æ –º—ñ—Å—Ç–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø–∏—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É.
            context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏.
        """
        try:
            query = update.callback_query
            query.answer()
            callback_data = query.data

            if callback_data.startswith("add_to_cart_"):
                product_id = callback_data.split("_", 3)[-1]
                add_to_cart_command = self.command_factory.get_command("add_to_cart")
                add_to_cart_command.execute(product_id, update, context)
            else:
                try:
                    command = self.command_factory.get_command(callback_data)
                    command.execute(update, context)
                except:
                    context.args = [callback_data]
                    command = self.command_factory.get_command("details")
                    command.execute(update, context)
        except Exception as e:
            logging.error(f"Button Handler execute error: {e}", exc_info=True)
