import pytest
from unittest.mock import MagicMock, patch
from cart_handler import AddToCartCommand, OpenCartCommand, CleanCartCommand
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

@patch('cart_handler.APIClient')
def test_add_to_cart_command(mock_api_client):
    add_to_cart = AddToCartCommand()
    update = MagicMock(spec=Update)
    context = MagicMock(spec=CallbackContext)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –¥–ª—è –º–µ—Ç–æ–¥–∞ APIClient.get_pizza_details_by_id
    mock_api_client.get_pizza_details_by_id.return_value = True

    # –¢–µ—Å—Ç –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    add_to_cart.execute(1, update, context)
    mock_api_client.add_to_cart.assert_called_once_with(update.effective_user.id, 1)
    context.bot.send_message.assert_called_once_with(
        chat_id=update.effective_chat.id,
        text="–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫ üß∫",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üß∫ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–æ—à–∏–∫—É", callback_data="open_cart")]])
    )

    # –¢–µ—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
    context.bot.send_message.reset_mock()
    mock_api_client.get_pizza_details_by_id.return_value = None
    add_to_cart.execute(1, update, context)
    context.bot.send_message.assert_called_once_with(chat_id=update.effective_chat.id, text="–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üò∂‚Äçüå´Ô∏è")

@patch('cart_handler.APIClient')
def test_open_cart_command(mock_api_client):
    open_cart = OpenCartCommand()
    update = MagicMock(spec=Update)
    context = MagicMock(spec=CallbackContext)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –¥–ª—è –º–µ—Ç–æ–¥–∞ APIClient.get_cart
    mock_api_client.get_cart.return_value = [('–¢–æ–≤–∞—Ä1', 2, 200), ('–¢–æ–≤–∞—Ä2', 1, 100)]

    # –¢–µ—Å—Ç –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    open_cart.execute(update, context)
    mock_api_client.get_cart.assert_called_once_with(update.effective_user.id)
    context.bot.send_message.assert_called_once()
    assert "–î–æ —Å–ø–ª–∞—Ç–∏" in context.bot.send_message.call_args[1]['text']

    # –¢–µ—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è
    context.bot.send_message.reset_mock()
    mock_api_client.get_cart.return_value = []
    open_cart.execute(update, context)
    context.bot.send_message.assert_called_once_with(
        chat_id=update.effective_chat.id,
        text='–ù–∞—Ä–∞–∑—ñ –∫–æ—à–∏–∫ –ø—É—Å—Ç–∏–π üòî',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", callback_data="menu")]])
    )

@patch('cart_handler.APIClient')
def test_clean_cart_command(mock_api_client):
    clean_cart = CleanCartCommand()
    update = MagicMock(spec=Update)
    context = MagicMock(spec=CallbackContext)

    # –¢–µ—Å—Ç –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –æ—á–∏—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    clean_cart.execute(update, context)
    mock_api_client.clear_cart.assert_called_once_with(update.effective_user.id)
    context.bot.send_message.assert_called_once_with(
        chat_id=update.effective_chat.id,
        text="–ö–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ üòî",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é", callback_data="menu")]])
    )

if __name__ == "__main__":
    pytest.main()
